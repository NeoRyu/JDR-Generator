name: Code Quality Checks

on:
  push: # Déclenche le workflow lors de chaque push de code
  pull_request: # Déclenche le workflow lors de chaque création ou mise à jour d'une pull request

jobs:
  java-code-quality:
    name: API Run Java Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      # Récupère le code source du dépôt
      - name: API Checkout code
        uses: actions/checkout@v3
      # Configuration de l'environnement Java
      - name: API Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      # Mise en cache des dépendances Maven
      - name: API Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('api/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # Exécution de Checkstyle
      - name: API Maven Checkstyle
        run: cd api && mvn --batch-mode checkstyle:check
      # Exécution de SpotBugs : analyse statique de code java
      #- name: API Maven SpotBugs
      #  run: cd api && mvn --batch-mode spotbugs:check
      # Exécution de PMD
      - name: API Maven PMD
        run: cd api && mvn --batch-mode pmd:check
        continue-on-error: true # Important: Don't fail the step here
        id: pmd
      - name: Analyze PMD Results
        run: |
          cd api
          if [ -f target/pmd.xml ]; then
            PMD_OUTPUT=$(cat target/pmd.xml || { echo "Error reading target/pmd.xml"; exit 1; })
            
            # Analyser et afficher les erreurs de priorité 1
            echo "Priority 1 PMD Errors:"
            xmllint --xpath '//violation[@priority="1"]/@message' target/pmd.xml | sed 's/message="//g;s/"//g;s/^/  - /'
          
            PRIORITY_1_ERRORS=$(echo "$PMD_OUTPUT" | grep -c 'priority="1"')
            PRIORITY_2_ERRORS=$(echo "$PMD_OUTPUT" | grep -c 'priority="2"')
            PRIORITY_3_ERRORS=$(echo "$PMD_OUTPUT" | grep -c 'priority="3"')
            echo "priority1_errors=$PRIORITY_1_ERRORS" >> "$GITHUB_OUTPUT"
            echo "priority2_errors=$PRIORITY_2_ERRORS" >> "$GITHUB_OUTPUT"
            echo "priority3_errors=$PRIORITY_3_ERRORS" >> "$GITHUB_OUTPUT"
          else
            echo "Error: target/pmd.xml not found..."
            exit 1
          fi
        id: analyze_pmd
      - name: Fail if Priority 1 Errors
        if: steps.analyze_pmd.outputs.priority1_errors > 0
        run: |
          cd api 
          echo "Priority 1 PMD errors found. Failing the build."
          exit 1
      - name:  Summary
        if: always()
        run: |
          cd api
          echo "PMD Check Summary"
          echo "Priority 1 Errors: ${{ steps.pmd.outputs.priority1_errors }}"
          echo "Priority 2 Errors: ${{ steps.pmd.outputs.priority2_errors }}"
          echo "Priority 3 Errors: ${{ steps.pmd.outputs.priority3_errors }}"
      # Exécution de Dependency Check
      - name: API Maven Dependency Check
        run: cd api && mvn --batch-mode org.owasp:dependency-check-maven:check
      # Exécution de Spotless (vérification du formatage)
      - name: API Maven Spotless Check
        run: cd api && mvn --batch-mode spotless:check
      # Exécution des tests unitaires
      - name: API Maven Test
        run: cd api && mvn --batch-mode surefire:test


  nodejs-code-quality-gemini:
    name: Node.js Code Quality - Gemini
    runs-on: ubuntu-latest
    needs: java-code-quality
    steps:
      # Récupérer le code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v3
      # Configurer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
      # Installer les dépendances
      - name: Install dependencies
        run: cd gemini && npm install
      # Formater le code avec Prettier
      - name: Format code # npm run format
        run: cd gemini && npm run format
      # Vérifier le formatage avec Prettier
      - name: Check formatting # cmd 'lint' dans package.json
        run: cd gemini && npm run format:check
      # ESLint
      - name: ESLint
        run: cd gemini && npm run lint
      # Vérifier TypeScript
      #- name: TypeScript Check
      #  run: cd gemini && npx tsc --noEmit

  nodejs-code-quality-openai:
    name: Node.js Code Quality - OpenAI
    runs-on: ubuntu-latest
    needs: java-code-quality
    steps:
      # Récupérer le code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v3
      # Configurer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
      # Installer les dépendances
      - name: Install dependencies
        run: cd openai && npm install
      # Formater le code avec Prettier
      - name: Format code # npm run format
        run: cd openai && npm run format
      # Vérifier le formatage avec Prettier
      - name: Check formatting # cmd 'lint' dans package.json
        run: cd openai && npm run format:check
      # ESLint
      - name: OpenAI ESLint
        run: cd openai && npm run lint
      # Vérifier TypeScript
      #- name: TypeScript Check
      #  run: cd openai && npx tsc --noEmit