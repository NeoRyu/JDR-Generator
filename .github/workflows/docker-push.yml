name: Build and push Docker images

on:
  push:
    branches:
      - githubactions
      - main
    paths:
      - 'api/**'
      - 'web/**'
      - 'gemini/**'
      - 'openai/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        type: boolean
        description: 'Force la reconstruction de toutes les images (mÃªme sans changements)'
        required: false
        default: false

jobs:
  build-and-push-api:
    name: Build and push API docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for API changes
        id: api_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api: 'api/**'
      - name: Output API changes
        run: echo "API changes detected ${{ steps.api_changes.outputs.api }}"
      - name: Login to Docker Hub
        if: steps.api_changes.outputs.api == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.api_changes.outputs.api == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Build and push API docker image
        if: steps.api_changes.outputs.api == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/api
          file: ${{ github.workspace }}/api/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-api:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-api:latest
          push: ${{ steps.login.outcome == 'success' && (steps.api_changes.outputs.api == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-gemini:
    name: Build and push GEMINI docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for GEMINI changes
        id: gemini_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            gemini: 'gemini/**'
      - name: Output GEMINI changes
        run: echo "GEMINI changes detected ${{ steps.api_changes.outputs.gemini }}"
      - name: Login to Docker Hub
        if: steps.gemini_changes.outputs.gemini == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.gemini_changes.outputs.gemini == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Build and push GEMINI docker image
        if: steps.gemini_changes.outputs.gemini == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/gemini
          file: ${{ github.workspace }}/gemini/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-gemini:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-gemini:latest
          push: ${{ steps.login.outcome == 'success' && (steps.gemini_changes.outputs.gemini == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-openai:
    name: Build and push OPENAI docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for OPENAI changes
        id: openai_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            openai: 'openai/**'
      - name: Output OPENAI changes
        run: echo "OPENAI changes detected ${{ steps.api_changes.outputs.openai }}"
      - name: Login to Docker Hub
        if: steps.openai_changes.outputs.openai == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.openai_changes.outputs.openai == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Build and push OPENAI docker image
        if: steps.openai_changes.outputs.openai == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/openai
          file: ${{ github.workspace }}/openai/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-openai:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-openai:latest
          push: ${{ steps.login.outcome == 'success' && (steps.openai_changes.outputs.openai == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-web:
    name: Build and push WEB docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for WEB changes
        id: web_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            web: 'web/**'
      - name: Output WEB changes
        run: echo "WEB changes detected ${{ steps.api_changes.outputs.web }}"
      - name: Login to Docker Hub
        if: steps.web_changes.outputs.web == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.web_changes.outputs.web == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Build and push WEB docker image
        if: steps.web_changes.outputs.web == 'true' || github.event.inputs.force_rebuild == 'true'
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/web
          file: ${{ github.workspace }}/web/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-web:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-web:latest
          push: ${{ steps.login.outcome == 'success' && (steps.web_changes.outputs.web == 'true' || github.event.inputs.force_rebuild == 'true') }}