name: Build and push Docker images

on:
  push:
    branches:
      - githubactions
      - main
    paths:
      - 'api/**'
      - 'web/**'
      - 'gemini/**'
      - 'openai/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        type: boolean
        required: false
        default: false
        description: 'Forcer la reconstruction des images'

jobs:
  build-and-push-api:
    name: Build and push API docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for API changes
        id: api_changes
        run: |
          git fetch --depth=2 origin ${{ github.sha }}
          # Récupérer l'hash du commit parent direct
          parent_sha=$(git rev-parse HEAD^)
          # Si le parent n'existe pas (premier commit), utiliser un hash nul
          if [[ -z "$parent_sha" ]]; then
           parent_sha=$(git hash-object -t tree /dev/null)
          fi
          changed_files=$(git diff --name-only "$parent_sha"...${{ github.sha }})
          echo "Fichiers modifiés détectés : $changed_files" # Ajout pour le diagnostic
          if echo "$changed_files" | grep -E '^api/'; then
             echo "modified=true" >> "$GITHUB_OUTPUT"
          else
             echo "modified=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to Docker Hub
        if: ${{ steps.api_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: ${{ steps.api_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/setup-buildx-action@v2
      - name: Build and push API docker image
        if: ${{ steps.api_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/api
          file: ${{ github.workspace }}/api/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-api:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-api:latest
          push: ${{ steps.login.outcome == 'success' && (steps.api_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-gemini:
    name: Build and push GEMINI docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for GEMINI changes
        id: gemini_changes
        run: |
          git fetch --depth=2 origin ${{ github.sha }}
          # Récupérer l'hash du commit parent direct
          parent_sha=$(git rev-parse HEAD^)
          # Si le parent n'existe pas (premier commit), utiliser un hash nul
          if [[ -z "$parent_sha" ]]; then
            parent_sha=$(git hash-object -t tree /dev/null)
          fi
          changed_files=$(git diff --name-only "$parent_sha"...${{ github.sha }})
          echo "Fichiers modifiés détectés : $changed_files" # Ajout pour le diagnostic
          if echo "$changed_files" | grep -E '^gemini/'; then
             echo "modified=true" >> "$GITHUB_OUTPUT"
          else
             echo "modified=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to Docker Hub
        if: ${{ steps.gemini_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: ${{ steps.gemini_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/setup-buildx-action@v2
      - name: Build and push GEMINI docker image
        if: ${{ steps.gemini_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/gemini
          file: ${{ github.workspace }}/gemini/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-gemini:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-gemini:latest
          push: ${{ steps.login.outcome == 'success' && (steps.gemini_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-openai:
    name: Build and push OPENAI docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for OPENAI changes
        id: openai_changes
        run: |
          git fetch --depth=2 origin ${{ github.sha }}
          # Récupérer l'hash du commit parent direct
          parent_sha=$(git rev-parse HEAD^)
          # Si le parent n'existe pas (premier commit), utiliser un hash nul
          if [[ -z "$parent_sha" ]]; then
            parent_sha=$(git hash-object -t tree /dev/null)
          fi
          changed_files=$(git diff --name-only "$parent_sha"...${{ github.sha }})
          echo "Fichiers modifiés détectés : $changed_files" # Ajout pour le diagnostic
          if echo "$changed_files" | grep -E '^openai/'; then
             echo "modified=true" >> "$GITHUB_OUTPUT"
          else
             echo "modified=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to Docker Hub
        if: ${{ steps.openai_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: ${{ steps.openai_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/setup-buildx-action@v2
      - name: Build and push OPENAI docker image
        if: ${{ steps.openai_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/openai
          file: ${{ github.workspace }}/openai/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-openai:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-openai:latest
          push: ${{ steps.login.outcome == 'success' && (steps.openai_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true') }}

  build-and-push-web:
    name: Build and push WEB docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for WEB changes
        id: web_changes
        run: |
          git fetch --depth=2 origin ${{ github.sha }}
          # Récupérer l'hash du commit parent direct
          parent_sha=$(git rev-parse HEAD^)
          # Si le parent n'existe pas (premier commit), utiliser un hash nul
          if [[ -z "$parent_sha" ]]; then
            parent_sha=$(git hash-object -t tree /dev/null)
          fi
          changed_files=$(git diff --name-only "$parent_sha"...${{ github.sha }})
          echo "Fichiers modifiés détectés : $changed_files" # Ajout pour le diagnostic
          if echo "$changed_files" | grep -E '^web/'; then
             echo "modified=true" >> "$GITHUB_OUTPUT"
          else
             echo "modified=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to Docker Hub
        if: ${{ steps.web_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/login-action@v2
        id: login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: ${{ steps.web_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/setup-buildx-action@v2
      - name: Build and push WEB docker image
        if: ${{ steps.web_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/web
          file: ${{ github.workspace }}/web/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-web:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/jdr-generator-web:latest
          push: ${{ steps.login.outcome == 'success' && (steps.web_changes.outputs.modified == 'true' || github.event.inputs.force_rebuild == 'true') }}