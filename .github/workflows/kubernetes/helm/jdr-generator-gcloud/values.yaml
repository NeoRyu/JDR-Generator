# jdr-generator-chart/values.yaml

# Items                            Req.CPU      Req.Memory     Limits CPU    Limits Memory
# -----------------------------------------------------------------------------------------
# Pods
#  api                               350m         328Mi            500m         512Mi
#  web                               150m         192Mi            175m         256Mi
#  gemini                             50m          96Mi             75m         128Mi
#  freepik                            50m          96Mi             75m         128Mi
#  openai                             50m          64Mi             75m          96Mi   # Inutilisé
# -----------------------------------------------------------------------------------------
#  Total Pods                        650m         776Mi            900m        1120Mi
# -----------------------------------------------------------------------------------------

# ----- e2-small (Capacités RÉELLES du nœud, basées sur 'kubectl describe node') ----------
# Consommation du Nœud (OS + Kub.)   ~840m      ~660Mi           ~1060m        ~660Mi
# -----------------------------------------------------------------------------------------
# Capacité TOTALE du Nœud e2-small  2000m (2vCPU) 2048Mi (2GiB) 2000m (2vCPU) 2048Mi (2GiB)
# -----------------------------------------------------------------------------------------
# Capacité du Noeud e2-small (Réellement Utilisable par VOS Pods)
#  Req.CPU (pour tous les pods)      ~940m           -               -            -
#  Req.Memory (pour tous les pods)       -        ~1361Mi            -            -
#  Limits CPU (pour tous les pods)       -             -           ~940m          -
#  Limits Memory (pour tous les pods)    -             -               -         ~1361Mi
# -----------------------------------------------------------------------------------------

# - Note Importante sur MySQL :
# MySQL n'est PAS inclus dans ces calculs de ressources pour le nœud GKE.
# Il est configuré comme 'enabled: false' dans le Helm chart et tourne sur une VM externe distincte.
# Cette architecture est indispensable pour faire tourner les autres services sur un nœud e2-small.

# Valeurs globales pour le chart
imagePullSecrets: []
nameOverride: "" # Pour surcharger le nom du chart
fullnameOverride: "" # Pour surcharger le nom complet

serviceAccount:
  create: true
  name: jdr-generator-sa
podSecurityContext: {}
  # fsGroup: 2000
  # runAsGroup: 2000
# runAsUser: 1000
securityContext: {}
  # allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000
nodeSelector: {}
affinity: {}
tolerations: []
volumes: []
volumeMounts: []

tests:
  enabled: true # helm lint

# Configuration de la section MYSQL (disabled)
mysql:
  enabled: false
  replicaCount: 1
  image: mysql:5.7
  containerPort: 3306
  service:
    type: ClusterIP
    port: 3306
  persistence:
    size: 5Gi
  resources:
    requests:
      memory: "128Mi"
      cpu: "200m"
    limits:
      memory: "256Mi"
      cpu: "300m"
  livenessProbe:
    tcpSocket:
      port: 3306
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  readinessProbe:
    exec:
      command: ["mysqladmin", "ping", "-h", "localhost"]
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  volumeMounts: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  volumes: []

# Configuration de la section API
api:
  enabled: true
  replicaCount: 1
  image:
    repository: gcr.io/jdr-generator/api # @sha256:5a5d8576c5121c3dcb909c8f7a53c7c117d20226d461bcee0ca87f1110e809db
    pullPolicy: IfNotPresent
    tag: "latest"
  containerPort: 8080
  service:
    type: LoadBalancer
    port: 80
  extraEnv:
    - name: SPRING_PROFILES_ACTIVE
      value: "gcloud"
    - name: SPRING_DATASOURCE_URL
      value: "jdbc:mysql://34.163.160.42:3306/jdr_generator_db?verifyServerCertificate=false&autoReconnect=true&useSSL=true&requireSSL=false&serverTimezone=Europe/Amsterdam&connectTimeout=5000&socketTimeout=5000"
  resources:
    requests:
      memory: "328Mi"
      cpu: "350m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  readinessProbe:
    httpGet:
      path: /actuator/health
    failureThreshold: 3
    timeoutSeconds: 7
    periodSeconds: 15
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /actuator/health
    failureThreshold: 3
    timeoutSeconds: 7
    periodSeconds: 15
    initialDelaySeconds: 45
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  volumeMounts: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  volumes: []


# Configuration de la section WEB
web:
  enabled: true
  replicaCount: 1
  image:
    repository: eli256/jdr-generator-web
    pullPolicy: IfNotPresent
    tag: "latest"
  containerPort: 80
  service:
    type: ClusterIP
    port: 80
  resources:
    requests:
      memory: "192Mi"
      cpu: "150m"
    limits:
      memory: "256Mi"
      cpu: "175m"
  livenessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  extraEnv: [ ]
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  volumeMounts: [ ]
  nodeSelector: { }
  affinity: { }
  tolerations: [ ]
  volumes: [ ]

# Configuration de la section GEMINI
gemini:
  enabled: true
  replicaCount: 1
  image:
    repository: eli256/jdr-generator-gemini
    pullPolicy: IfNotPresent
    tag: "latest"
  containerPort: 3001
  service:
    type: ClusterIP
    port: 3001
  resources:
    requests:
      memory: "96Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "75m"
  apiKeyExistingSecret: "jdr-generator-ai-secrets"
  apiKeySecretKey: "GEMINI_API_KEY"
  livenessProbe:
    httpGet:
      path: /gemini/healthcheck
      port: 3001
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /gemini/healthcheck
      port: 3001
    initialDelaySeconds: 25
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
  extraEnv: [ ]
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  volumeMounts: [ ]
  nodeSelector: { }
  affinity: { }
  tolerations: [ ]
  volumes: [ ]

# Configuration de la section FREEPIK
freepik:
  enabled: true
  replicaCount: 1
  image:
    repository: eli256/jdr-generator-freepik
    pullPolicy: IfNotPresent
    tag: "latest"
  containerPort: 3003
  service:
    type: ClusterIP
    port: 3003
  resources:
    requests:
      memory: "96Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "75m"
  apiKeyExistingSecret: "jdr-generator-ai-secrets"
  apiKeySecretKey: "FREEPIK_API_KEY"
  livenessProbe:
    httpGet:
      path: /freepik/healthcheck
      port: 3003
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /freepik/healthcheck
      port: 3003
    initialDelaySeconds: 25
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
  extraEnv: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  volumeMounts: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  volumes: []

# Configuration de la section OPENAI
openai:
  enabled: true
  replicaCount: 1
  image:
    repository: eli256/jdr-generator-openai
    pullPolicy: IfNotPresent
    tag: "latest"
  containerPort: 3002
  service:
    type: ClusterIP
    port: 3002
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "96Mi"
      cpu: "75m"
  apiKeyExistingSecret: "jdr-generator-ai-secrets"
  apiKeySecretKey: "OPENAI_API_KEY"
  orgIdExistingSecret: "jdr-generator-ai-secrets"
  orgIdSecretKey: "OPENAI_ORG_ID"
  livenessProbe:
    httpGet:
      path: /openai/healthcheck
      port: 3002
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /openai/healthcheck
      port: 3002
    initialDelaySeconds: 25
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
  extraEnv: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  volumeMounts: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  volumes: []

# Configuration de la section CONFIGMAPS
configmaps:
  # Configuration des CONFIGMAPS
  api:
    enabled: true
    data:
      SPRING_PROFILES_ACTIVE: "prod,gcloud"
      MAX_TOKEN: "2048"
      DOWNLOAD_FOLDER: "jdr-generator"
      USER_WINDOW: "fredericcoupez"
      GEMINI_API_URL: "http://34.163.160.42:3001/gemini"
      OPENAI_API_URL: "http://34.163.160.42:3002/openai"
      FREEPIK_API_URL: "http://34.163.160.42:3003/freepik"

  web:
    enabled: true
    data:
      VITE_API_URL: "/"

  gemini:
    enabled: true
    data:
      AI_TEXT_MODEL: "gemini-2.0-flash"
      AI_IMAGE_MODEL: "gemini-2.0-flash-exp-image-generation"

  freepik:
    enabled: true
    data:
      AI_LIST: "https://www.freepik.com/api/pricing"

  openai:
    enabled: true
    data:
      AI_TEXT_MODEL: "gpt-4o-mini"
      AI_IMAGE_MODEL: "dall-e-3"
      AI_LIST: "https://platform.openai.com/docs/models"

# Configuration des SECRETS
secrets:
  gemini:
    enabled: true
  openai:
    enabled: true
  freepik:
    enabled: true
  # Configuration pour le secret MySQL
  mysql:
    enabled: true
    create: true
    existingSecretName: "jdr-generator-mysql-secrets"
    data:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "jdr_generator_db"
      MYSQL_USER: "jdr_user"
      MYSQL_PASSWORD: "root"
  # Configuration pour le secret contenant TOUTES les clés API des IA (Gemini, OpenAI, Freepik)
  apiKeys:
    create: true
    existingSecretName: "jdr-generator-ai-secrets"
    # IMPORTANT : Le bloc 'data' pour aiKeys est intentionnellement ABSENT ici.
    # Les données sensibles pour ce secret DOIVENT sont fournies via un fichier
    # de valeurs externe ( ai-secrets-values.yaml) lors de l'exécution
    # de 'helm install/upgrade -f'
    # De fait ce fichier 'values.yaml' NE CONTIENDRA PAS les clés d'API sensibles.
