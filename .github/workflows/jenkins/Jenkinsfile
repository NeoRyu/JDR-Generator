pipeline {
    agent any // {label 'linux'}

    parameters {
        choice(choices: ['jenkins','main'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    tools { // http://localhost:8080/manage/configureTools/
        nodejs 'NodeJS_20.11.1'
        maven 'Maven_3.8.5'
        jdk 'JDK_17_LTS'
    }

    environment {
        FRONTEND_DIR = 'web'
        BACKEND_DIR = 'api'
        GEMINI_DIR  = 'gemini'
        OPENAI_DIR  = 'openai'

        MAVEN_IMAGE = 'maven:3.8.5-openjdk-17'
        NODE_IMAGE = 'node:20-alpine'
    }

    stages {

        stage('Jenkinsfile') {
            steps {
                script {
                    def jenkinsfilePath = "${env.WORKSPACE}/Jenkinsfile"
                    if (fileExists(jenkinsfilePath)) {
                        def scriptContent = readFile(jenkinsfilePath)
                        echo "===== Jenkinsfile (début) ====="
                        echo scriptContent
                        echo "===== Jenkinsfile (fin) ====="
                    } else {
                        echo "Fichier Jenkinsfile introuvable dans le workspace"
                    }
                }
            }
        }

        stage('GIT - Checkout Code') {
            steps {
                echo '--- https://github.com/NeoRyu/JDR-Generator ---'
                git branch: "${params.BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('API - Code Quality Checks') {
            steps {
                script { // Nécessaire pour utiliser 'withJava' dans un bloc 'steps' de stage
                    withJava(jdk: 'JDK_17_LTS') { // UTILISATION DU JDK SPÉCIFIQUE ICI
                        dir(env.BACKEND_DIR) {
                            sh 'mvn --version'
                            sh 'java --version'
                            echo '--- API : Run Checkstyle ---'
                            sh '''
                                mvn checkstyle:check || true
                            '''
                            echo '--- API : Run OWASP Dependency Check ---'
                            sh '''
                                mvn org.owasp:dependency-check-maven:check || true
                            '''
                        }
                    }
                }
                echo '--- API : Fin des vérifications de qualité du code ---'
            }
        }

        stage('WEB - Code Quality Checks') {
            steps {
                dir(env.FRONTEND_DIR) {
                    echo '--- WEB : Install Node & NPM dependencies ---'
                    sh '''
                        npm ci
                    '''
                     echo '--- WEB : Run ESLint (Frontend) ---'
                    sh '''
                        npx eslint . || true
                    '''
                }
                echo '--- WEB : Fin des vérifications de qualité du code ---'
            }
        }

        stage('GEMINI - Code Quality Checks') {
            steps {
                dir(env.GEMINI_DIR) {
                    echo '--- GEMINI : Install Node & NPM dependencies ---'
                    sh '''
                        npm ci
                    '''
                    echo '--- GEMINI : Run ESLint ---'
                    sh '''
                        npx eslint . || true
                    '''
                    echo '--- GEMINI : Run npm audit ---'
                    sh '''
                        npm audit --omit=dev || true
                    '''
                }
                echo '--- GEMINI : Fin des vérifications de qualité du code ---'
            }
        }

        stage('OPENAI - Code Quality Checks') {
            steps {
                dir(env.OPENAI_DIR) {
                    echo '--- OPENAI : Install Node & NPM dependencies ---'
                    sh '''
                        npm ci
                    '''
                    echo '--- OPENAI : Run ESLint ---'
                    sh '''
                        npx eslint . || true
                    '''
                    echo '--- OPENAI : Run npm audit ---'
                    sh '''
                        npm audit --omit=dev || true
                    '''
                    // sh 'docker system prune -f || true' // Ceci était un test et devrait être dans post.
                }
                echo '--- OPENAI : Fin des vérifications de qualité du code ---'
            }
        }

    } // Fin du bloc stages

    post {
        always {
            script {
                echo "Nettoyage des fichiers temporaires et des conteneurs Docker..."
                sh 'docker system prune -f || true'
                // sh 'rm -rf ~/.npm/_logs || true'
            }
        }
        failure {
            echo "Jenkins Pipeline : Des vérifications de qualité du code ont échouées !"
        }
        success {
            echo "Jenkins Pipeline : Toutes les vérifications de qualité du code ont réussies !"
        }
    }

}