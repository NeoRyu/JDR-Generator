pipeline {
    agent any

    parameters {
        choice(choices: ['jenkins','main'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${params.BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('Code Quality Checks') {
            environment {
                MAVEN_IMAGE = 'maven:3.8.5-openjdk-17'
                NODE_IMAGE = 'node:20-alpine'
            }
            // Bloc EOF_SCRIPT utilisant un heredoc ayant permis de passer le script multiline au conteneur Docker
            /*steps {
                script {
                    echo "--- Début des vérifications de qualité du code ---"
                    sh """
                        docker run --rm --user root -v "${WORKSPACE}":/app "${MAVEN_IMAGE}" /bin/bash -s <<'EOF_SCRIPT'
                            ls -l /app
                            cd /app/api
                            pwd
                            ls -l
                        EOF_SCRIPT
                    """
                }
            }*/
            // Bloc de vérifications de qualité de code complètes
            steps {
                echo '--- Début des vérifications de qualité du code ---'

                // Maven (Java)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${MAVEN_IMAGE}" /bin/bash -s <<'EOF_MAVEN_CHECK'
                        cd /app/api
                        mvn --batch-mode checkstyle:check spotless:check
                    EOF_MAVEN_CHECK
                """

                // Node.js (Web)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_WEB_INSTALL'
                        cd /app/web
                        npm install
                    EOF_NODE_WEB_INSTALL
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_WEB_FORMAT'
                        cd /app/web
                        npm run format:check
                    EOF_NODE_WEB_FORMAT
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_WEB_LINT'
                        cd /app/web
                        npm run lint
                    EOF_NODE_WEB_LINT
                """

                // Node.js (Gemini)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_GEMINI_INSTALL'
                        cd /app/gemini
                        npm install
                    EOF_NODE_GEMINI_INSTALL
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_GEMINI_FORMAT'
                        cd /app/gemini
                        npm run format:check
                    EOF_NODE_GEMINI_FORMAT
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_GEMINI_LINT'
                        cd /app/gemini
                        npm run lint
                    EOF_NODE_GEMINI_LINT
                """

                // Node.js (OpenAI)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_OPENAI_INSTALL'
                        cd /app/openai
                        npm install
                    EOF_NODE_OPENAI_INSTALL
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_OPENAI_FORMAT'
                        cd /app/openai
                        npm run format:check
                    EOF_NODE_OPENAI_FORMAT
                """
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_OPENAI_LINT'
                        cd /app/openai
                        npm run lint
                    EOF_NODE_OPENAI_LINT
                """

                echo '--- Fin des vérifications de qualité du code ---'
            }
            post {
                always {
                    echo "Nettoyage du conteneur Docker..."
                }
                failure {
                    echo "Des vérifications de qualité du code ont échouées ..."
                }
                success {
                    echo "Toutes les vérifications de qualité du code ont réussies !"
                }
            }
        }
    }
}