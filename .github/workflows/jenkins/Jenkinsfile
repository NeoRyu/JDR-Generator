pipeline {
    agent any

    parameters {
        choice(choices: ['jenkins','main'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${params.BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('Code Quality Checks') {
            environment {
                MAVEN_IMAGE = 'maven:3.8.5-openjdk-17'
                NODE_IMAGE = 'node:20-alpine'
            }
            steps {
                echo '--- Début des vérifications de qualité du code ---'

                // Maven (Java)
                script {
                    echo "Exécution des vérifications de qualité de code Maven..."
                    try {
                        def mavenOutput = sh(script: """
                            docker run --rm --user root -v "${WORKSPACE}":/app maven:3.8.5-openjdk-17 /bin/bash -s <<'EOF_MAVEN_CHECK'
                                set -eux
                                cd /app
                                mvn clean verify
                            EOF_MAVEN_CHECK
                        """, returnStdout: true).trim()
                        echo "--- Sortie des vérifications de qualité de code Maven ---"
                        echo mavenOutput
                        if (mavenOutput.contains("BUILD FAILURE")) {
                            echo "Des vérifications de qualité du code ont échouées !"
                            error("Les vérifications de qualité du code Maven ont échoué.")
                        } else {
                            echo "Les vérifications de qualité du code Maven sont réussies."
                        }
                    } catch (Exception e) {
                        echo "Une erreur est survenue lors de l'exécution des vérifications de qualité du code : ${e.getMessage()}"
                        error("Échec des vérifications de qualité du code en raison d'une erreur d'exécution.")
                    }
                }

                // Node.js (Web)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_WEB_INSTALL'
                        set -eux
                        cd /app/web
                        npm install
                    EOF_NODE_WEB_INSTALL
                """
                script {
                    echo "Exécution de 'format:check' pour Node.js (Web)..."
                    try {
                        def webFormatOutput = sh(script: """
                            set -eux
                            echo "Contenu de /app AVANT cd /app/web (pour debug):"
                            ls -F /app
                            cd /app/web
                            npm run format:check
                        """, returnStdout: true).trim() // sh lèvera une exception si la commande échoue
                        echo "--- Sortie de 'format:check' pour Node.js (Web) ---"
                        echo webFormatOutput
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (Web) a échoué. Détails: ${e.getMessage()}"
                    }
                }
                script {
                    echo "Exécution de 'lint' pour Node.js (Web)..."
                    try {
                        def webLintOutput = sh(script: """
                            set -eux
                            cd /app/web
                            npm run lint
                        """, returnStdout: true).trim() // sh lèvera une exception si la commande échoue
                        echo "--- Sortie de 'lint' pour Node.js (Web) ---"
                        echo webLintOutput
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (Web) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Gemini)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_GEMINI_INSTALL'
                        set -eux
                        cd /app/gemini
                        npm install
                    EOF_NODE_GEMINI_INSTALL
                """
                script {
                    echo "Exécution de 'format:check' pour Node.js (Gemini)..."
                    try {
                        def geminiFormatOutput = sh(script: """
                            set -eux
                            cd /app/gemini
                            npm run format:check
                        """, returnStdout: true).trim()
                        echo "--- Sortie de 'format:check' pour Node.js (Gemini) ---"
                        echo geminiFormatOutput
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (Gemini) a échoué. Détails: ${e.getMessage()}"
                    }
                }
                script {
                    echo "Exécution de 'lint' pour Node.js (Gemini)..."
                    try {
                        def geminiLintOutput = sh(script: """
                            set -eux
                            cd /app/gemini
                            npm run lint
                        """, returnStdout: true).trim()
                        echo "--- Sortie de 'lint' pour Node.js (Gemini) ---"
                        echo geminiLintOutput
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (Gemini) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (OpenAI)
                sh """
                    docker run --rm --user root -v "${WORKSPACE}":/app "${NODE_IMAGE}" /bin/sh -s <<'EOF_NODE_OPENAI_INSTALL'
                        set -eux
                        cd /app/openai
                        npm install
                    EOF_NODE_OPENAI_INSTALL
                """
                script {
                    echo "Exécution de 'format:check' pour Node.js (OpenAI)..."
                    try {
                        def openaiFormatOutput = sh(script: """
                            set -eux
                            cd /app/openai
                            npm run format:check
                        """, returnStdout: true).trim()
                        echo "--- Sortie de 'format:check' pour Node.js (OpenAI) ---"
                        echo openaiFormatOutput
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (OpenAI) a échoué. Détails: ${e.getMessage()}"
                    }
                }
                script {
                    echo "Exécution de 'lint' pour Node.js (OpenAI)..."
                    try {
                        def openaiLintOutput = sh(script: """
                            set -eux
                            cd /app/openai
                            npm run lint
                        """, returnStdout: true).trim()
                        echo "--- Sortie de 'lint' pour Node.js (OpenAI) ---"
                        echo openaiLintOutput
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (OpenAI) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                echo '--- Fin des vérifications de qualité du code ---'
            }
            post {
                always {
                    echo "Nettoyage du conteneur Docker..."
                }
                failure {
                    echo "Des vérifications de qualité du code ont échouées !"
                }
                success {
                    echo "Toutes les vérifications de qualité du code ont réussies !"
                }
            }
        }
    }
}