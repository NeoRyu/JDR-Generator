pipeline {
    agent any

    parameters {
        choice(choices: ['jenkins','main'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${params.BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('Code Quality Checks') {
            environment {
                MAVEN_IMAGE = 'maven:3.8.5-openjdk-17'
                NODE_IMAGE = 'node:20-alpine'
            }
            steps {
                echo '--- Début des vérifications de qualité du code ---'

                // Maven (Java) - Utilise le here-document pour le script exécuté dans le conteneur Maven
                script {
                    echo "Exécution des vérifications de qualité de code Maven..."
                    try {
                        def mavenOutput = sh(script: """
                            docker run --rm --user root -v "${WORKSPACE}":/app "${MAVEN_IMAGE}" /bin/bash -s <<'EOF_MAVEN_CHECK'
                                set -eux # Affiche les commandes et échoue à la première erreur
                                cd /app/api # IMPORTANT : Changement de répertoire vers le sous-projet Java
                                mvn clean verify
                            EOF_MAVEN_CHECK
                        """, returnStdout: true).trim()
                        echo "--- Sortie des vérifications de qualité de code Maven ---"
                        echo mavenOutput
                        if (mavenOutput.contains("BUILD FAILURE")) {
                            echo "Des vérifications de qualité du code Maven ont échoué !"
                            error("Les vérifications de qualité du code Maven ont échoué.")
                        } else {
                            echo "Les vérifications de qualité du code Maven sont réussies."
                        }
                    } catch (hudson.AbortException e) {
                        echo "Une erreur est survenue lors de l'exécution des vérifications de qualité du code Maven : ${e.getMessage()}"
                        error("Les vérifications de qualité du code Maven ont échoué.")
                    }
                }

                // Node.js (Web) - npm install : utilise docker cp et here-document (pas besoin de returnStdout)
                script {
                    echo "Exécution de 'npm install' pour Node.js (Web)..."
                    try {
                        sh <<'EOF_JENKINS_SH_WEB_INSTALL'
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/web/." \$CONTAINER_ID:/app/web/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_WEB_INSTALL'
                                set -eux
                                cd /app/web
                                npm install
                            EOF_WEB_INSTALL
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        EOF_JENKINS_SH_WEB_INSTALL
                    } catch (hudson.AbortException e) {
                        error "'npm install' pour Node.js (Web) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Web) - format:check : utilise docker cp et capture la sortie
                script {
                    echo "Exécution de 'format:check' pour Node.js (Web)..."
                    try {
                        def webFormatResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/web/." \$CONTAINER_ID:/app/web/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_WEB_FORMAT_INNER'
                                set -eux
                                cd /app/web
                                npm run format:check
                            EOF_WEB_FORMAT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'format:check' pour Node.js (Web) ---"
                        echo webFormatResult.stdout.trim()
                        if (webFormatResult.status != 0) {
                            error "'format:check' pour Node.js (Web) a échoué avec le code de sortie ${webFormatResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (Web) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Web) - lint : utilise docker cp et capture la sortie
                script {
                    echo "Exécution de 'lint' pour Node.js (Web)..."
                    try {
                        def webLintResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/web/." \$CONTAINER_ID:/app/web/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_WEB_LINT_INNER'
                                set -eux
                                cd /app/web
                                npm run lint
                            EOF_WEB_LINT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'lint' pour Node.js (Web) ---"
                        echo webLintResult.stdout.trim()
                        if (webLintResult.status != 0) {
                            error "'lint' pour Node.js (Web) a échoué avec le code de sortie ${webLintResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (Web) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Gemini) - npm install
                script {
                    echo "Exécution de 'npm install' pour Node.js (Gemini)..."
                    try {
                        sh <<'EOF_JENKINS_SH_GEMINI_INSTALL'
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/gemini/." \$CONTAINER_ID:/app/gemini/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_GEMINI_INSTALL'
                                set -eux
                                cd /app/gemini
                                npm install
                            EOF_GEMINI_INSTALL
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        EOF_JENKINS_SH_GEMINI_INSTALL
                    } catch (hudson.AbortException e) {
                        error "'npm install' pour Node.js (Gemini) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Gemini) - format:check
                script {
                    echo "Exécution de 'format:check' pour Node.js (Gemini)..."
                    try {
                        def geminiFormatResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/gemini/." \$CONTAINER_ID:/app/gemini/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_GEMINI_FORMAT_INNER'
                                set -eux
                                cd /app/gemini
                                npm run format:check
                            EOF_GEMINI_FORMAT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'format:check' pour Node.js (Gemini) ---"
                        echo geminiFormatResult.stdout.trim()
                        if (geminiFormatResult.status != 0) {
                            error "'format:check' pour Node.js (Gemini) a échoué avec le code de sortie ${geminiFormatResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (Gemini) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (Gemini) - lint
                script {
                    echo "Exécution de 'lint' pour Node.js (Gemini)..."
                    try {
                        def geminiLintResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/gemini/." \$CONTAINER_ID:/app/gemini/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_GEMINI_LINT_INNER'
                                set -eux
                                cd /app/gemini
                                npm run lint
                            EOF_GEMINI_LINT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'lint' pour Node.js (Gemini) ---"
                        echo geminiLintResult.stdout.trim()
                        if (geminiLintResult.status != 0) {
                            error "'lint' pour Node.js (Gemini) a échoué avec le code de sortie ${geminiLintResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (Gemini) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (OpenAI) - npm install
                script {
                    echo "Exécution de 'npm install' pour Node.js (OpenAI)..."
                    try {
                        sh <<'EOF_JENKINS_SH_OPENAI_INSTALL'
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/openai/." \$CONTAINER_ID:/app/openai/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_OPENAI_INSTALL'
                                set -eux
                                cd /app/openai
                                npm install
                            EOF_OPENAI_INSTALL
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        EOF_JENKINS_SH_OPENAI_INSTALL
                    } catch (hudson.AbortException e) {
                        error "'npm install' pour Node.js (OpenAI) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (OpenAI) - format:check
                script {
                    echo "Exécution de 'format:check' pour Node.js (OpenAI)..."
                    try {
                        def openaiFormatResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/openai/." \$CONTAINER_ID:/app/openai/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_OPENAI_FORMAT_INNER'
                                set -eux
                                cd /app/openai
                                npm run format:check
                            EOF_OPENAI_FORMAT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'format:check' pour Node.js (OpenAI) ---"
                        echo openaiFormatResult.stdout.trim()
                        if (openaiFormatResult.status != 0) {
                            error "'format:check' pour Node.js (OpenAI) a échoué avec le code de sortie ${openaiFormatResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'format:check' pour Node.js (OpenAI) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                // Node.js (OpenAI) - lint
                script {
                    echo "Exécution de 'lint' pour Node.js (OpenAI)..."
                    try {
                        def openaiLintResult = sh(script: """
                            set -eux
                            CONTAINER_ID=\$(docker create "${NODE_IMAGE}" /bin/sh)
                            docker cp "${WORKSPACE}/openai/." \$CONTAINER_ID:/app/openai/
                            docker start \$CONTAINER_ID
                            docker exec \$CONTAINER_ID /bin/sh -s <<'EOF_OPENAI_LINT_INNER'
                                set -eux
                                cd /app/openai
                                npm run lint
                            EOF_OPENAI_LINT_INNER
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID || true
                        """, returnStdout: true, returnStatus: true)
                        echo "--- Sortie de 'lint' pour Node.js (OpenAI) ---"
                        echo openaiLintResult.stdout.trim()
                        if (openaiLintResult.status != 0) {
                            error "'lint' pour Node.js (OpenAI) a échoué avec le code de sortie ${openaiLintResult.status}"
                        }
                    } catch (hudson.AbortException e) {
                        error "'lint' pour Node.js (OpenAI) a échoué. Détails: ${e.getMessage()}"
                    }
                }

                echo '--- Fin des vérifications de qualité du code ---'
            }
            post {
                always {
                    echo "Nettoyage du conteneur Docker..."
                }
                failure {
                    echo "Des vérifications de qualité du code ont échouées !"
                }
                success {
                    echo "Toutes les vérifications de qualité du code ont réussies !"
                }
            }
        }
    }
}