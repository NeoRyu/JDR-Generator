pipeline {
    agent any

    parameters {
        choice(choices: ['main','jenkins'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('Code Quality Checks') {
            environment {
                MAVEN_IMAGE = 'maven:3.9.5-jdk-17'
                NODE_IMAGE = 'node:18-alpine'
                CONTAINER_NAME = 'code-quality-check-container'
            }
            steps {
                echo '--- Début des vérifications de qualité du code ---'

                // Maven (Java)
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${MAVEN_IMAGE}\" sh -c 'cd /app/api && mvn --batch-mode checkstyle:check spotless:check'"

                // Node.js (Web)
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm install'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm run format:check'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm run lint'"

                // Node.js (Gemini)
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm install'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm run format:check'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm run lint'"

                // Node.js (OpenAI)
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm install'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm run format:check'"
                sh "docker run --rm -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm run lint'"

                echo '--- Fin des vérifications de qualité du code ---'
            }
            post {
                always {
                    echo "Nettoyage du conteneur Docker..."
                    // sh "docker rm -f ${CONTAINER_NAME}"
                }
                failure {
                    echo "Des vérifications de qualité du code ont échouées ..."
                }
                success {
                    echo "Toutes les vérifications de qualité du code ont réussies !"
                }
            }
        }
    }

}