pipeline {
    agent any

    parameters {
        choice(choices: ['jenkins','main'], name: 'BRANCH_TO_BUILD', description: 'Choix de la branche')
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Utilisation correcte du paramètre BRANCH_TO_BUILD
                git branch: "${params.BRANCH_TO_BUILD}", url: 'https://github.com/NeoRyu/JDR-Generator'
            }
        }

        stage('Code Quality Checks') {
            environment {
                MAVEN_IMAGE = 'maven:3.8.5-openjdk-17'
                NODE_IMAGE = 'node:20-alpine'
            }
            steps {
                script {
                    echo "--- Début des vérifications de qualité du code ---"
                    // Ajout de cette ligne pour débugger le chemin
                    sh "docker run --rm --user root -v \"${WORKSPACE}\":/app ${MAVEN_IMAGE} sh -c 'ls -l /app && cd /app/api && mvn --batch-mode checkstyle:check spotless:check'"
                    echo "Nettoyage du conteneur Docker..."
                    echo "Des vérifications de qualité du code ont échouées ..."
                }
            }
            /*steps {
                echo '--- Début des vérifications de qualité du code ---'

                // Maven (Java)
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${MAVEN_IMAGE}\" sh -c 'cd /app/api && mvn --batch-mode checkstyle:check spotless:check'"

                // Node.js (Web)
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm install'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm run format:check'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/web && npm run lint'"

                // Node.js (Gemini)
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm install'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm run format:check'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/gemini && npm run lint'"

                // Node.js (OpenAI)
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm install'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm run format:check'"
                sh "docker run --rm --user root -v \"${WORKSPACE}:/app\" \"${NODE_IMAGE}\" sh -c 'cd /app/openai && npm run lint'"

                echo '--- Fin des vérifications de qualité du code ---'
            }*/
            post {
                always {
                    echo "Nettoyage du conteneur Docker..."
                }
                failure {
                    echo "Des vérifications de qualité du code ont échouées ..."
                }
                success {
                    echo "Toutes les vérifications de qualité du code ont réussies !"
                }
            }
        }
    }
}